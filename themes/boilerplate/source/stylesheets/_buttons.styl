// -----------------------------------------------------
// Buttons
// -----------------------------------------------------
// I realize that this is insane, but trust me, it's worth it

// Helper: highlight
// Adds a light brighter line across the top of the element for a perspective effect.
// Takes an optional argument for strength, which takes a value between 0 and 1
// ex. highlight
// ex. highlight(.7)

-highlight(strength = .3)
  box-shadow(s("inset 0 1px 0 %s", rgba(255,255,255,strength)))

// Helper: parse
// Used internally for setting button sizes.

-parse(size)
  if size == "small"
    return 10
  else if size == "medium"
    return 13
  else if size == "large"
    return 18
  else if size == "xlarge"
    return 24
  else
    return size

// Mixin: Simple Button
// Creates a very basic looking button style. Two optional params:
// - color: Takes any color, defaults to the default global color
// - size: Takes 'small', 'medium', 'large', or an integer. The numbers reflects the
//   font size for the text inside the button, but scales all other aspects as well.
// ex. $button()
// ex. $button(blue)
// ex. $button(#D4513B)
// ex. $button(green, large)
// ex. $button(#4C82D4, 24)

// These will accept font icons interally in the very near future

button(color = color1, size = "medium", textColor = null)

  // color detection and changes
  textColor = (light(color) ? #494949 : #fff) unless textColor
  parsed_size = -parse(size)

  // now that we've got numbers, let's work some proportions
  height = round((parsed_size * 1.53px) / 2)
  width = round(((parsed_size * 1.53px) * 2.2) / 2)

  // dynamically calculated styles
  font-size: unit(parsed_size, px)
  padding: unit(height, px) unit(width, px)
  border-radius: round(parsed_size / 4.33333px)
  background-color: color
  color: textColor

  // constant styles
  cursor: pointer
  font-weight: bold
  font-family: font-stack
  line-height: 1em
  text-align: center
  text-decoration: none
  display: inline-block
  border none

  &:hover, &:focus
    background-color: darken(color, 15%)
    color: darken(textColor, 3%)

  &:active
    background-color: darken(color, 20%)

// Mixin: Glossy Button
// Creates a more fancy looking button style. Two optional params:
// - color: Takes any color, defaults to the default global color
// - size: Takes 'small', 'medium', 'large', or an integer. The numbers reflects the
//   font size for the text inside the button, but scales all other aspects as well.
// ex. glossy-button()
// ex. glossy-button(blue)
// ex. glossy-button(#D4513B)
// ex. glossy-button(green, large)
// ex. glossy-button(#4C82D4, 24)

glossy-button(color = default-color, size = "medium", textColor = null, shadowColor = null, hoverColor = null)

  // color detection and changes
  if textColor
    darkText = light(textColor) ? true : false
  else
    darkText = light(color) ? false : true
    textColor = darkText ? white : #494949

  shadowColor = darkText ? rgba(#000,.1) : rgba(#fff,.3) unless shadowColor
  hoverColor = darkText ? rgba(#000,.2) : rgba(#fff,.5) unless hoverColor
  downShadow = darkText ? 0 -1px 1px rgba(#000,.2) : 1px 1px 1px rgba(#fff,.6)

  // parse words, make sure it's a number
  parsed_size = -parse(size)

  // now that we've got numbers, let's work some proportions
  height = round((parsed_size*1.53px)/2)
  width = round(((parsed_size*1.53px)*2.2)/2)

  // dynamically calculated styles
  font-size: unit(parsed_size, px)
  padding: unit(height, px) unit(width, px)
  border-radius: round(parsed_size/4.33333px)
  gradient: color
  text-shadow: 1px 1px 1px shadowColor
  border: s('1px solid %s', darken(color, 10%))
  color: textColor

  // constant styles
  -highlight()
  cursor: pointer
  font-weight: bold
  font-family: font-stack
  line-height: 1em
  text-align: center
  text-decoration: none
  display: inline-block

  &:hover, &:focus
    background-position: 0 unit(height * -1, px)
    background-color: darken(color, 15%)
    color: darken(textColor, 3%)
    text-shadow: 1px 1px 1px hoverColor

  &:active
    box-shadow(s("inset 0 1px %s %s", parsed_size/2.6px, rgba(darken(color, 25%),.6)))
    text-shadow: downShadow
    border-color: darken(color, 18%)
    background-color: darken(color, 20%)

// Mixin: Button Disabled
// Add this mixin to a button and it will make the button appear to be disabled.
// Easiest to attach to a class like '.disabled' and add that class to the button.
// Takes no arguments.
// ex.  .disabled
//        +button-disabled

button-disabled()
  background: #ccc
  border-color: darken(#ccc, 10%)
  opacity: .5
  cursor: default
  no-select()
  &:hover
    background: #ccc
    background-position: 0 0
  &:active
    background: #ccc
    box-shadow(none)
    border-color: darken(#ccc, 10%)
    text-shadow: 1px 1px 1px rgba(#000,.1)

pressable-button
  position relative
  top 0
  box-shadow 0 2px 10px rgba(1, 1, 1, 0.25)
  transition top 0.1s, border-bottom 0.1s, box-shadow 0.1s
  margin 5px 0
  display inline
  border-radius 1px

  &:first-child
    border-radius .5em 0 0 .5em
  &:last-child
    border-radius 0 .5em .5em 0

pressable(color)
  @extend pressable-button
  background color
  border solid 1px darken(color, 20%)
  border-bottom solid 10px darken(color, 20%)

  &:hover
    top 4px
    border-bottom solid 6px darken(color, 20%)
    box-shadow 0 1px 10px rgba(1, 1, 1, 0.25)


  &:active
    top 9px
    border-bottom solid 1px darken(color, 20%)
    box-shadow 0 0px 0px rgba(1, 1, 1, 0.25)

// Additive Mixin: Buttons
// WARNING: Creates classes in your css and styles them - not to be used inside an element.
// This mixin makes it such that you can use classes to define buttons on your page.
// .btn-simple: creates a simple button
// .btn: creates a fancy button
// .disabled: disables an existing button (will only work on .btn and .btn-simple)

button, .button, input[type=submit]
  transition()
  button(color1, large)

  &.disabled
    button-disabled()
